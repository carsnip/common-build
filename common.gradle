group = projectGroup
version = projectVersion
archivesBaseName = projectName
sourceCompatibility = 1.11
jar.baseName = projectName
mainClassName = projectMainClass

sourceSets {
  acceptanceTest {
    groovy {
      srcDir file('/src/acceptanceTest/groovy')
      compileClasspath += main.output + test.output + configurations.testRuntime
      runtimeClasspath += output + compileClasspath
    }
  }

  integrationTest {
    groovy {
      srcDir file('/src/integrationTest/groovy')
      compileClasspath += main.output + test.output + configurations.testRuntime
      runtimeClasspath += output + compileClasspath
    }
  }
}

jar {
  manifest {
    attributes 'Main-Class': mainClassName
  }
}

distributions {
  main {
    contents {
      from configurations.runtime.allArtifacts.files
      from configurations.runtime
    }
  }
}

repositories {
  // use our artifactory repository that proxies the other repositories such as maven central
  ivy {
    url "http://artifactory.internal.carsnip.com:8081/artifactory/libs-release-local"
    layout "maven"
  }
  maven { url "http://artifactory.internal.carsnip.com:8081/artifactory/libs-release" }
  jcenter()
}

configurations {
  compile {
    exclude group: "commons-logging", module: "commons-logging"
    exclude group: "org.springframework", module: "spring-jcl"
  }
  all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 5, 'minutes'
  }
  acceptanceTestCompile.extendsFrom testImplementation
  acceptanceTestRuntime.extendsFrom testRuntime
  integrationTestCompile.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

task acceptanceTest(type: Test) {
  testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
  classpath = sourceSets.acceptanceTest.runtimeClasspath
  include '**/*'
  outputs.upToDateWhen { false }
}

task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  include '**/*'
  outputs.upToDateWhen { false }
}

task buildDocker(type: Exec) {
  workingDir projectDir
  commandLine 'sh', '-c', "docker/build.sh $projectName $projectVersion $projectMainClass"
}

buildDocker.dependsOn(distZip)

dependencyUpdates.resolutionStrategy {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'snapshot', 'final'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.?\d-]?.*/
      }

      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

gradleLint {
  //unused-dependency covers used but undeclared classes as well as unused, so ignore any of the "one or more classes
  //in <dependency> are required by your code directly (no auto-fix available)", no easy fix :(
  rules = ['all-dependency', 'unused-dependency', 'unused-exclude-by-dep']
  excludedRules = ['unused-exclude-by-conf']

  //Can be commented out after the first time it's run as it's useful, but it also doesn't recognise implementation, and
  //replaces with compile (and sets hard versions.) If they fix this then can be added to excludedRules
  excludedRules += 'undeclared-dependency'

  alwaysRun = false
}